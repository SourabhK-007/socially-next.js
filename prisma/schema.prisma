// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  posts    Post[] //one to many
  comments Comment[] //one to many
  likes    Like[] //one to many

  follwers  Follows[] @relation("following") //users who follow this user
  following Follows[] @relation("follower") // users followed by this user

  notifications        Notifications[] @relation("userNotification") //notifications received by user
  notificationsCreated Notifications[] @relation("notificationCreator") // notification created by the user
  Follows              Follows[]
 
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade) //delete: cascade- deletes all posts if usrr gets deleted
  comments      Comment[] //one to many
  likes         Like[] //one to many
  
  Notifications Notifications[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  //Relations
  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  
 notifications Notifications[] 
  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  //Relations
  author User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) //This prevents same user liking multiple times
  @@index([userId, postId]) //composite index for faster queries
}

model Follows {
  
 followerId String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower",fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following",fields: [followingId], references: [id], onDelete: Cascade)
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?


  @@id([followerId, followingId]) // composite primary key prevents duplicate follows
  @@index([followerId, followingId])
}

model Notifications {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())

  //Relations
  user    User     @relation("userNotification", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  

  @@index([userId, postId]) //composite index for faster queries
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
